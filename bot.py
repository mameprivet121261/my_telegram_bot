import os
import json
import random
from datetime import datetime
from PIL import Image
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from flask import Flask
import threading


# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
SECRET_CODE = os.getenv("SECRET_CODE")

# –ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
IMAGE_FOLDER = "images"


AUTH_FILE = "/tmp/authorized.json"


RANDOM_TEXTS = [
"'–õ—é–±–æ–≤—å –Ω–µ –∑–Ω–∞–µ—Ç –Ω–∏ –º–µ—Ä—ã, –Ω–∏ —Ü–µ–Ω—ã' –≠—Ä–∏—Ö –ú–∞—Ä–∏—è –†–µ–º–∞—Ä–∫",
    "'–°–∞–º–æ–µ –ª—É—á—à–µ–µ –≤–æ –º–Ω–µ ‚Äî —ç—Ç–æ —Ç—ã'",
    "'–ò–Ω–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ª—é–±–∏—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, –∫–∞–∫ —Å–∏–ª—å–Ω–æ –≤—ã –µ–≥–æ –ª—é–±–∏—Ç–µ'",
    "'–ñ–∏–∑–Ω—å –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤ –∏ –≤—ã–¥–æ—Ö–æ–≤, –∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–µ—Ö –º–æ–º–µ–Ω—Ç–æ–≤, –∫–æ–≥–¥–∞ –æ—Ç —Å—á–∞—Å—Ç—å—è –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –¥—É—Ö'",
    "'–ï—Å—Ç—å –æ–¥–Ω–∞ –±–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é —è —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É—é, –∏ —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –µ—ë –Ω–µ —É–∑–Ω–∞–µ—à—å. –≠—Ç–æ –±–æ–ª—å –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–±—è' –î—ç–≤–∏–¥ –ì—Ä–µ–π—Å–æ–Ω",
    "'–õ—é–±–æ–≤—å –Ω–µ —Ç–µ—Ä–ø–∏—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–π. –ï–π –Ω—É–∂–Ω—ã –ø–æ—Å—Ç—É–ø–∫–∏'  –≠—Ä–∏—Ö –ú–∞—Ä–∏—è –†–µ–º–∞—Ä–∫",
    "'–õ—é–±–∏—Ç—å ‚Äî —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞, –ª—é–±–∏—Ç—å ‚Äî –∑–Ω–∞—á–∏—Ç –≤–º–µ—Å—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏' –ê–Ω—Ç—É–∞–Ω –¥–µ –°–µ–Ω—Ç-–≠–∫–∑—é–ø–µ—Ä–∏",
    "'–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –Ω—É–∂–Ω—ã, –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç —Å–ø–æ—Å–æ–± –±—ã—Ç—å —Ä—è–¥–æ–º'  –ú–∏—Ö–∞–∏–ª –õ–µ—Ä–º–æ–Ω—Ç–æ–≤",
    "'–ù–∞—Å—Ç–æ—è—â–∏–µ –ª—é–±–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è' –†–∏—á–∞—Ä–¥ –ë–∞—Ö",
    "'–õ—é–±–æ–≤—å ‚Äì —ç—Ç–æ –∫—É–ø–∞–Ω–∏–µ, –Ω—É–∂–Ω–æ –ª–∏–±–æ –Ω—ã—Ä—è—Ç—å —Å –≥–æ–ª–æ–≤–æ–π, –ª–∏–±–æ –≤–æ–æ–±—â–µ –Ω–µ –ª–µ–∑—Ç—å –≤ –≤–æ–¥—É. –ï—Å–ª–∏ –±—É–¥–µ—à—å —Å–ª–æ–Ω—è—Ç—å—Å—è –≤–¥–æ–ª—å –±–µ—Ä–µ–≥–∞ –ø–æ –∫–æ–ª–µ–Ω–æ –≤ –≤–æ–¥–µ, —Ç–æ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ –æ–±—Ä—ã–∑–≥–∞–µ—Ç –±—Ä—ã–∑–≥–∞–º–∏ –∏ —Ç—ã –±—É–¥–µ—à—å –º–µ—Ä–∑–Ω—É—Ç—å –∏ –∑–ª–∏—Ç—å—Å—è' –°–µ—Ä–≥–µ–π –ï—Å–µ–Ω–∏–Ω",
    "'–û—Ç–≤–µ—Ç–Ω–∞—è –ª—é–±–æ–≤—å —Ç–µ—Ö, –∫–æ–≥–æ –º—ã –ª—é–±–∏–º, ‚Äî —ç—Ç–æ –æ–≥–æ–Ω—å, –ø–∏—Ç–∞—é—â–∏–π –Ω–∞—à—É –∂–∏–∑–Ω—å' –ü–∞–±–ª–æ –ù–µ—Ä—É–¥–∞",
    "'–†–∞–∑–ª—É–∫–∞ –¥–ª—è –ª—é–±–≤–∏ —Ç–æ –∂–µ, —á—Ç–æ –≤–µ—Ç–µ—Ä –¥–ª—è –æ–≥–Ω—è: –º–∞–ª–µ–Ω—å–∫—É—é –ª—é–±–æ–≤—å –æ–Ω–∞ —Ç—É—à–∏—Ç, –∞ –±–æ–ª—å—à—É—é —Ä–∞–∑–¥—É–≤–∞–µ—Ç –µ—â–µ —Å–∏–ª—å–Ω–µ–π'  –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö—É–ø—Ä–∏–Ω",
    "'–õ—é–±—è—â–µ–µ —Å–µ—Ä–¥—Ü–µ —Å—Ç–æ–∏—Ç –±–æ–ª—å—à–µ, —á–µ–º –≤—Å—è –º—É–¥—Ä–æ—Å—Ç—å –Ω–∞ —Å–≤–µ—Ç–µ'   –ß–∞—Ä–ª—å–∑ –î–∏–∫–∫–µ–Ω—Å",
    "'–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –æ–¥–Ω–∞ –¥—É—à–∞ –≤ –¥–≤—É—Ö —Ç–µ–ª–∞—Ö'  –ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å",
    "'–õ—é–±–∏ –≤—Å–µ—Ö, –¥–æ–≤–µ—Ä—å—Å—è –Ω–µ–º–Ω–æ–≥–∏–º, –Ω–µ –¥–µ–ª–∞–π –∑–ª–∞ –Ω–∏–∫–æ–º—É'  –£–∏–ª—å—è–º –®–µ–∫—Å–ø–∏—Ä",
	"'–ò–∑ —á–µ–≥–æ —Å–¥–µ–ª–∞–Ω—ã –Ω–∞—à–∏ –¥—É—à–∏, –µ–≥–æ –∏ –º–æ—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã'   –≠–º–∏–ª–∏ –ë—Ä–æ–Ω—Ç–µ",
	"'–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –≤—Å—ë –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ.'   –≠–¥–≤–∞—Ä–¥ –≠—Å—Ç–ª–∏–Ω –ö–∞–º–º–∏–Ω–≥—Å",
	"'–Ø —Ç–≤–æ–π, –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–π –º–µ–Ω—è —Å–µ–±–µ.'   –†—É–º–∏",
	"'–õ—é–±–æ–≤—å ‚Äî –¥—ã–º, –ø–æ–¥–Ω—è—Ç—ã–π –∏–∑ –≤–∑–¥–æ—Ö–æ–≤.'   –®–µ–∫—Å–ø–∏—Ä",
	"'–Ø –ª—é–±–∏–ª –µ—ë –≤–æ–ø—Ä–µ–∫–∏ —Ä–∞–∑—É–º—É, –æ–±–µ—â–∞–Ω–∏—è–º –∏ –ø–æ–∫–æ—é.'   –ß–∞—Ä–ª—å–∑ –î–∏–∫–∫–µ–Ω—Å",
	"'–í –ª—é–±–≤–∏ –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω —Ü–µ–ª—É–µ—Ç, –∞ –¥—Ä—É–≥–æ–π –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —â—ë–∫—É.'   —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞",
	"'–õ—é–±–æ–≤—å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è —Å —á–∞—Å–∞–º–∏ –∏ –Ω–µ–¥–µ–ª—è–º–∏, –Ω–æ –≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∞–∂–µ –¥–æ –∫–æ–Ω—Ü–∞ –≤—Ä–µ–º—ë–Ω.'   –®–µ–∫—Å–ø–∏—Ä",
	"'–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è —Ç–∞–π–Ω–∞.'   –†–∞–±–∏–Ω–¥—Ä–∞–Ω–∞—Ç –¢–∞–≥–æ—Ä",
	"'–ú—ã –ª—é–±–∏–ª–∏ –ª—é–±–æ–≤—å—é, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –±–æ–ª—å—à–µ —á–µ–º –ª—é–±–æ–≤—å.'   –≠–¥–≥–∞—Ä –ê–ª–ª–∞–Ω –ü–æ",
	"'–õ—é–±–∏—Ç—å —Å–µ–±—è ‚Äî –Ω–∞—á–∞–ª–æ —Ä–æ–º–∞–Ω–∞ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å.'   –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
	"'–£ —Å–µ—Ä–¥—Ü–∞ –µ—Å—Ç—å —Å–≤–æ–∏ –ø—Ä–∏—á–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –∑–Ω–∞–µ—Ç —Ä–∞–∑—É–º.'   –ë–ª–µ–∑ –ü–∞—Å–∫–∞–ª—å",
    "'–ù–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –æ—Ç –ª—é–±–≤–∏, –∫—Ä–æ–º–µ –∫–∞–∫ –ª—é–±–∏—Ç—å –µ—â—ë —Å–∏–ª—å–Ω–µ–µ.'  –ì–µ–Ω—Ä–∏ –î—ç–≤–∏–¥ –¢–æ—Ä–æ",
	"'–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –≤—Ä–µ–º—è, –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–µ —Å–µ—Ä–¥—Ü–µ–º.'   –ú–∞—Ä—Å–µ–ª—å –ü—Ä—É—Å—Ç",
	"'–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –¥—Ä—É–∂–±–∞, –æ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ–≥–Ω—ë–º.'   –î–∂–µ—Ä–µ–º–∏ –¢–µ–π–ª–æ—Ä",
	"'–ï—Å–ª–∏ —è –∑–Ω–∞—é, —á—Ç–æ —Ç–∞–∫–æ–µ –ª—é–±–æ–≤—å, —Ç–æ —Ç–æ–ª—å–∫–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ.'   –ì–µ—Ä–º–∞–Ω –ì–µ—Å—Å–µ",
	"'–õ—é–±–æ–≤—å –Ω–µ –≤–ª–∞—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –≤–∑—Ä–∞—â–∏–≤–∞–µ—Ç.'   –ò–æ–≥–∞–Ω–Ω –í–æ–ª—å—Ñ–≥–∞–Ω–≥ –ì—ë—Ç–µ",
	"'–õ—é–±–æ–≤—å ‚Äî –ø–æ—ç–∑–∏—è —á—É–≤—Å—Ç–≤.'   –û–Ω–æ—Ä–µ –¥–µ –ë–∞–ª—å–∑–∞–∫",
	"'–ò—Å—Ç–æ—Ä–∏–∏ –∏—Å—Ç–∏–Ω–Ω–æ–π –ª—é–±–≤–∏ –Ω–µ –∏–º–µ—é—Ç –∫–æ–Ω—Ü–∞.'   –†–∏—á–∞—Ä–¥ –ë–∞—Ö",
	"'–õ—é–±–æ–≤—å —Å–º–æ—Ç—Ä–∏—Ç –Ω–µ –≥–ª–∞–∑–∞–º–∏, –∞ —Ä–∞–∑—É–º–æ–º.'   –®–µ–∫—Å–ø–∏—Ä",
	"'–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ö–æ–ª—Å—Ç –ø—Ä–∏—Ä–æ–¥—ã, –≤—ã—à–∏—Ç—ã–π –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.'  –í–æ–ª—å—Ç–µ—Ä",
	"'–õ—é–±–∏—Ç—å –∏ –±—ã—Ç—å –ª—é–±–∏–º—ã–º ‚Äî –∑–Ω–∞—á–∏—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ–ª–Ω—Ü–µ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.'   –î—ç–≤–∏–¥ –í–∏—Å–∫–æ—Ç—Ç",
	"'–õ—é–±–æ–≤—å ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–æ–ª–æ—Ç–æ.'   –ê–ª—å—Ñ—Ä–µ–¥ –¢–µ–Ω–Ω–∏—Å–æ–Ω",
]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏


def load_authorized():
    if os.path.exists(AUTH_FILE):
        with open(AUTH_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def save_authorized(users):
    with open(AUTH_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


authorized_users = load_authorized()


# –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
def get_random_image():
    if not os.path.exists(IMAGE_FOLDER):
        return None

    files = os.listdir(IMAGE_FOLDER)
    images = []

    for f in files:
        path = os.path.join(IMAGE_FOLDER, f)
        if f.lower().endswith((".jpg", ".jpeg", ".png")):
            images.append(path)

    if not images:
        return None
    return random.choice(images)


# –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç
def get_random_text():
    return random.choice(RANDOM_TEXTS)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id in authorized_users:
        await show_main_menu(update.message)
    else:
        await update.message.reply_text("üîë –í–≤–µ–¥–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
async def check_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    text = update.message.text

    if user_id in authorized_users:
        return

    if text == SECRET_CODE:
        authorized_users[user_id] = {"count": 0, "last_date": ""}
        save_authorized(authorized_users)
        await update.message.reply_text("–¢–∞–Ω—é—à, —ç—Ç–æ —Ç—ã?))))‚ù§Ô∏è")
        await show_main_menu(update.message)
    else:
        await update.message.reply_text("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!")


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(message):
    keyboard = [[InlineKeyboardButton("üì∏–ü—É–∫üôÉ", callback_data="combo")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)

    if user_id not in authorized_users:
        await query.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return

    today = datetime.now().strftime("%Y-%m-%d")
    user_data = authorized_users[user_id]

    if user_data["last_date"] != today:
        user_data["count"] = 0
        user_data["last_date"] = today

    if user_data["count"] >= 2:
        await query.message.reply_text("ü•∫ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë, –ø—É–ø—Å–∏–∫")
        return

    user_data["count"] += 1
    save_authorized(authorized_users)

    await query.answer()

    if query.data == "combo":
        image_path = get_random_image()
        text = get_random_text()
        if image_path:
            with open(image_path, "rb") as photo:
                await query.message.reply_photo(photo=photo, caption=text)
        else:
            await query.message.reply_text("‚ùå –í –ø–∞–ø–∫–µ images –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫!")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder() \
        .token(TOKEN) \
        .connect_timeout(30) \
        .read_timeout(30) \
        .build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_code))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–º–∏ /start –≤ Telegram")
    app.run_polling()


# Flask dummy —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
flask_app = Flask(__name__)


@flask_app.route("/")
def index():
    return "Bot is running!"


def run_flask():
    port = int(os.environ.get("PORT", 5000))
    flask_app.run(host="0.0.0.0", port=port)


if __name__ == "__main__":
    # –∑–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask).start()
    # –∑–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    main()